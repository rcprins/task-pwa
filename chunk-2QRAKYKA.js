import{a as b,b as y,d as h}from"./chunk-ER4P5RIX.js";import{a as w}from"./chunk-7C2UX2RN.js";import"./chunk-52CJYXQM.js";import{a as x,b as k}from"./chunk-4UOR76Y4.js";import{$a as d,Pb as o,Uc as u,Wc as D,Xc as v,ba as p,cb as f,p as l,ta as c,xb as i,yb as a,zb as g}from"./chunk-URZPAQU4.js";var s=class t extends k{static \u0275fac=(()=>{let n;return function(r){return(n||(n=c(t)))(r||t)}})();static \u0275cmp=d({type:t,selectors:[["assembly-task"]],features:[f],decls:17,vars:0,consts:[[2,"display","flex","gap","24px","align-items","flex-start"],[2,"flex","1"],["mat-card-image","","src","./assets/assembly-drawing.png","alt","Example Image",2,"max-width","100%","height","300px"],[2,"flex","1","display","flex","flex-direction","column","gap","8px"]],template:function(e,r){e&1&&(i(0,"mat-card-content")(1,"label"),o(2,"ASSEMBLY"),a(),i(3,"div",0)(4,"div",1),g(5,"img",2),a(),i(6,"div",3)(7,"label"),o(8,"INSTRUCTIONS"),a(),i(9,"mat-checkbox"),o(10,"Confirm WPS (Welding Procedure Specification)"),a(),i(11,"mat-checkbox"),o(12,"Tack Welding"),a(),i(13,"mat-checkbox"),o(14,"Welding"),a(),i(15,"mat-checkbox"),o(16,"Post-Weld Cleaning"),a()()()())},dependencies:[v,u,D,w],encapsulation:2})};var C={name:"DrawingDB",version:1,objectStoresMeta:[{store:"files",storeConfig:{keyPath:"id",autoIncrement:!1},storeSchema:[{name:"name",keypath:"name",options:{unique:!1}},{name:"type",keypath:"type",options:{unique:!1}},{name:"size",keypath:"size",options:{unique:!1}},{name:"file",keypath:"file",options:{unique:!1}}]}]},m=class t extends b{constructor(){super(new y({[C.name]:C},window.indexedDB),"files")}getAllRemoteInternal(){throw new Error("Method not implemented.")}getByIdRemote(n){let e={};return e.id=h(),e.type="OBJ",e.name="Assembly drawing",e.size=" 50 KB",e.file="blabalblae",l(e)}watchTasks(){return this.watchEntities()}static \u0275fac=function(e){return new(e||t)};static \u0275prov=p({token:t,factory:t.\u0275fac,providedIn:"root"})},S=new m;var I=class extends x{getTaskDetailsComponent(){return s}getTaskDetails(n){n.workItems.forEach(e=>{let r=e;S.getById(r.drawing)})}};export{I as AssemblyTaskPlugin};
